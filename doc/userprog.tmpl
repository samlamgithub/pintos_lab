             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Yuliya Gitlina <yuliya.gitlina13@imperial.ac.uk>
Artem Kalikin <artem.kalikin13@imperial.ac.uk>
Jiahao Lin <jiahao.lin13@imperial.ac.uk>
Zhuofan Zhang <zhuofan.zhang13@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (5 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread{

    ...    //things we added in previous tasks
    
    // below are what we added in this task
    struct semaphore * child_alive;     /* semaphore indicating that child have not died yet */
    struct semaphore * child_loading;   /* semaphore indicating if the child is still loading*/

    struct thread * parent;             /* parent of the thread */
    struct list_elem child;             /* element of parent's list of children*/
    struct list children;               /* children of the thread */
    struct list children_return;        /* children statuses */
}

---- ALGORITHMS ----

>> A2: (10 marks)
>> Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: (5 marks)
>> Why does Pintos implement strtok_r() but not strtok()?

The strtok_r() function has one more argument "char **saveptr" than
strtok(). What "char **saveptr" does is that it saves the address of 
the first byte of the string. In other words, it maintains the string
context. Hence, it allows successive calls that parse the same string.
It also allows different strings to be parsed concurrently, by specifying
different SAVEPTR argument. Since Pintos is a multi-thread system, 
strtok_r() is more thread-safe and suitable.

>> A4: (10 marks)
>> In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Firstly, the approach of Unix-like systems is safer since the separation does 
not take place directly in the kernel. Therefore, unsafe commands are identified 
before arrival to kernel, which in turn simplifies kernel operations.

Secondly, the code for separating commands in Unix-like systems is written in 
shell. Hence, the operations associated with parsing user input will take place 
in user space. That would make kernel space more secure as well as reduce the 
amount of code written in it, thus, reducing complexity and generally making 
code structure cleaner.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (10 marks) 
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
struct thread{

    ...      //things we had in previous tasks
    
    // below are what we added in this task
    int fd_distibution;
	struct list file_fd_list;

	int exit_status; // exit status of the thread

 
}

struct file_fd {
   struct list_elem file_fd_list_elem;
   struct file * fil;
   int fd;
};

struct return_status
  {
    int tid;                            /* thread id */
    int return_code;                    /* return code of the thread */
    struct list_elem elem;
  };



>> B2: (5 marks)
>> Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Every time a single file is opened, it returns a file descriptor(a non-negative
integer) to the process which called open. If open is failed, it returns -1.
If a single file is opened more than once, no matter it is opened by a single
process or different processes, each open always returns a new file descriptor.
Different file descriptors are closed independently and they do not share a file
position. i.e., one file descriptor is associated with one open call.
File descriptors are unique within the entire OS.

---- ALGORITHMS ----

>> B3: (5 marks)
>> Describe your code for reading and writing user data from the
>> kernel.

>> B4: (5 marks)
>> Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: (5 marks)
>> Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: (5 marks)
>> Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: (5 marks)
>> The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: (5 marks)
>> Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: (5 marks)
>> Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: (5 marks)
>> What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: (5 marks)
>> The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
